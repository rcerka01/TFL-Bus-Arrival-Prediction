package models.autogenerated
// AUTO-GENERATED Slick data model
/** Stand-alone Slick data model for immediate use */
object Tables extends {
  val profile = slick.driver.MySQLDriver
} with Tables

/** Slick data model trait for extension, choice of backend or usage in the cake pattern. (Make sure to initialize this late.) */
trait Tables {
  val profile: slick.driver.JdbcProfile
  import profile.api._
  import slick.model.ForeignKeyAction
  // NOTE: GetResult mappers for plain SQL are only generated for tables where Slick knows how to map the types of all columns.
  import slick.jdbc.{GetResult => GR}

  /** DDL for all tables. Call .create to execute. */
  lazy val schema = Jobs.schema ++ Roles.schema ++ Users.schema
  @deprecated("Use .schema instead of .ddl", "3.0")
  def ddl = schema

  /** Entity class storing rows of table Jobs
   *  @param id Database column id SqlType(INT), AutoInc
   *  @param busnr Database column busnr SqlType(VARCHAR), Length(45,true), Default(None)
   *  @param busstopId Database column busstop_id SqlType(VARCHAR), Length(45,true), Default(None)
   *  @param usersId Database column users_id SqlType(INT)
   *  @param busstopName Database column busstop_name SqlType(VARCHAR), Length(254,true), Default(None) */
  case class JobsRow(id: Int, busnr: Option[String] = None, busstopId: Option[String] = None, usersId: Int, busstopName: Option[String] = None)
  /** GetResult implicit for fetching JobsRow objects using plain SQL queries */
  implicit def GetResultJobsRow(implicit e0: GR[Int], e1: GR[Option[String]]): GR[JobsRow] = GR{
    prs => import prs._
    JobsRow.tupled((<<[Int], <<?[String], <<?[String], <<[Int], <<?[String]))
  }
  /** Table description of table jobs. Objects of this class serve as prototypes for rows in queries. */
  class Jobs(_tableTag: Tag) extends Table[JobsRow](_tableTag, "jobs") {
    def * = (id, busnr, busstopId, usersId, busstopName) <> (JobsRow.tupled, JobsRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (Rep.Some(id), busnr, busstopId, Rep.Some(usersId), busstopName).shaped.<>({r=>import r._; _1.map(_=> JobsRow.tupled((_1.get, _2, _3, _4.get, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))

    /** Database column id SqlType(INT), AutoInc */
    val id: Rep[Int] = column[Int]("id", O.AutoInc)
    /** Database column busnr SqlType(VARCHAR), Length(45,true), Default(None) */
    val busnr: Rep[Option[String]] = column[Option[String]]("busnr", O.Length(45,varying=true), O.Default(None))
    /** Database column busstop_id SqlType(VARCHAR), Length(45,true), Default(None) */
    val busstopId: Rep[Option[String]] = column[Option[String]]("busstop_id", O.Length(45,varying=true), O.Default(None))
    /** Database column users_id SqlType(INT) */
    val usersId: Rep[Int] = column[Int]("users_id")
    /** Database column busstop_name SqlType(VARCHAR), Length(254,true), Default(None) */
    val busstopName: Rep[Option[String]] = column[Option[String]]("busstop_name", O.Length(254,varying=true), O.Default(None))

    /** Primary key of Jobs (database name jobs_PK) */
    val pk = primaryKey("jobs_PK", (id, usersId))

    /** Foreign key referencing Users (database name fk_jobs_users1) */
    lazy val usersFk = foreignKey("fk_jobs_users1", usersId, Users)(r => r.id, onUpdate=ForeignKeyAction.NoAction, onDelete=ForeignKeyAction.NoAction)
  }
  /** Collection-like TableQuery object for table Jobs */
  lazy val Jobs = new TableQuery(tag => new Jobs(tag))

  /** Entity class storing rows of table Roles
   *  @param id Database column id SqlType(INT), AutoInc
   *  @param role Database column role SqlType(VARCHAR), Length(254,true), Default(None)
   *  @param usersId Database column users_id SqlType(INT) */
  case class RolesRow(id: Int, role: Option[String] = None, usersId: Int)
  /** GetResult implicit for fetching RolesRow objects using plain SQL queries */
  implicit def GetResultRolesRow(implicit e0: GR[Int], e1: GR[Option[String]]): GR[RolesRow] = GR{
    prs => import prs._
    RolesRow.tupled((<<[Int], <<?[String], <<[Int]))
  }
  /** Table description of table roles. Objects of this class serve as prototypes for rows in queries. */
  class Roles(_tableTag: Tag) extends Table[RolesRow](_tableTag, "roles") {
    def * = (id, role, usersId) <> (RolesRow.tupled, RolesRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (Rep.Some(id), role, Rep.Some(usersId)).shaped.<>({r=>import r._; _1.map(_=> RolesRow.tupled((_1.get, _2, _3.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))

    /** Database column id SqlType(INT), AutoInc */
    val id: Rep[Int] = column[Int]("id", O.AutoInc)
    /** Database column role SqlType(VARCHAR), Length(254,true), Default(None) */
    val role: Rep[Option[String]] = column[Option[String]]("role", O.Length(254,varying=true), O.Default(None))
    /** Database column users_id SqlType(INT) */
    val usersId: Rep[Int] = column[Int]("users_id")

    /** Primary key of Roles (database name roles_PK) */
    val pk = primaryKey("roles_PK", (id, usersId))

    /** Foreign key referencing Users (database name fk_roles_users) */
    lazy val usersFk = foreignKey("fk_roles_users", usersId, Users)(r => r.id, onUpdate=ForeignKeyAction.NoAction, onDelete=ForeignKeyAction.NoAction)
  }
  /** Collection-like TableQuery object for table Roles */
  lazy val Roles = new TableQuery(tag => new Roles(tag))

  /** Entity class storing rows of table Users
   *  @param id Database column id SqlType(INT), AutoInc, PrimaryKey
   *  @param date Database column date SqlType(TIMESTAMP), Default(None)
   *  @param name Database column name SqlType(VARCHAR), Length(254,true), Default(None)
   *  @param email Database column email SqlType(VARCHAR), Length(254,true), Default(None)
   *  @param password Database column password SqlType(VARCHAR), Length(254,true), Default(None)
   *  @param isactive Database column isActive SqlType(BIT), Default(None) */
  case class UsersRow(id: Int, date: Option[java.sql.Timestamp] = None, name: Option[String] = None, email: Option[String] = None, password: Option[String] = None, isactive: Option[Boolean] = None)
  /** GetResult implicit for fetching UsersRow objects using plain SQL queries */
  implicit def GetResultUsersRow(implicit e0: GR[Int], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Option[Boolean]]): GR[UsersRow] = GR{
    prs => import prs._
    UsersRow.tupled((<<[Int], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[Boolean]))
  }
  /** Table description of table users. Objects of this class serve as prototypes for rows in queries. */
  class Users(_tableTag: Tag) extends Table[UsersRow](_tableTag, "users") {
    def * = (id, date, name, email, password, isactive) <> (UsersRow.tupled, UsersRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (Rep.Some(id), date, name, email, password, isactive).shaped.<>({r=>import r._; _1.map(_=> UsersRow.tupled((_1.get, _2, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))

    /** Database column id SqlType(INT), AutoInc, PrimaryKey */
    val id: Rep[Int] = column[Int]("id", O.AutoInc, O.PrimaryKey)
    /** Database column date SqlType(TIMESTAMP), Default(None) */
    val date: Rep[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("date", O.Default(None))
    /** Database column name SqlType(VARCHAR), Length(254,true), Default(None) */
    val name: Rep[Option[String]] = column[Option[String]]("name", O.Length(254,varying=true), O.Default(None))
    /** Database column email SqlType(VARCHAR), Length(254,true), Default(None) */
    val email: Rep[Option[String]] = column[Option[String]]("email", O.Length(254,varying=true), O.Default(None))
    /** Database column password SqlType(VARCHAR), Length(254,true), Default(None) */
    val password: Rep[Option[String]] = column[Option[String]]("password", O.Length(254,varying=true), O.Default(None))
    /** Database column isActive SqlType(BIT), Default(None) */
    val isactive: Rep[Option[Boolean]] = column[Option[Boolean]]("isActive", O.Default(None))
  }
  /** Collection-like TableQuery object for table Users */
  lazy val Users = new TableQuery(tag => new Users(tag))
}
